
/*
=== ููุงุญุธุงุช ุงูุชุฎุตูุต - ุตูุญุฉ ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ ===

ุงูุฃููุงู ุงููุณุชุฎุฏูุฉ:
- primary: ุงูููู ุงูุฃุณุงุณู (ุฃุฒุฑู) - ููุดุนุงุฑ ูุงูุฑูุงุจุท ูุงูุฃุฒุฑุงุฑ ุงูุฑุฆูุณูุฉ
- red: ุฃุญูุฑ - ูุฑุณุงุฆู ุงูุฎุทุฃ ูุฃุฒุฑุงุฑ ุงูุญุฐู
- green: ุฃุฎุถุฑ - ูุฑุณุงุฆู ุงููุฌุงุญ
- muted-foreground: ุฑูุงุฏู ููุฃููููุงุช ูุงููุตูุต ุงูุซุงูููุฉ

ุงูุนูุงุตุฑ ุงูุฑุฆูุณูุฉ:
1. ุดุนุงุฑ ุงููุธุงู - Droplets ูุน ุงุณู ุงูุชุทุจูู
2. ุจุทุงูุฉ ุงูุชุณุฌูู - Card ูุน ุธู ููู
3. ุญูู ุงุณู ุงูุดุฑูุฉ - Input ูุน ุฃููููุฉ Briefcase
4. ุญููู ุฃุฑูุงู ุงูููุงุชู - ูุชุนุฏุฏุฉ ูุน ุฅููุงููุฉ ุงูุฅุถุงูุฉ ูุงูุญุฐู
5. ุญูู ุงุณู ุงููุณุชุฎุฏู - Input ูุน ุฃููููุฉ AtSign
6. ุญููู ูููุฉ ุงููุฑูุฑ - Input ูุน ุฃููููุฉ KeyRound
7. ุญูู ููุน ุงูุญุณุงุจ - Select ูุน ุฃููููุฉ Users
8. ุฒุฑ ุฅูุดุงุก ุงูุญุณุงุจ - Button variant="primary"

ุงูุฃููููุงุช ููุนุงูููุง:
- Droplets: ุดุนุงุฑ ุดุฑูุฉ ุงูููุงู (ุฃุฒุฑู ุฃุณุงุณู)
- Briefcase: ุฃููููุฉ ุงูุดุฑูุฉ/ุงููุคุณุณุฉ (ุฑูุงุฏู)
- Phone: ุฃููููุฉ ุฃุฑูุงู ุงูููุงุชู (ุฑูุงุฏู)
- PlusCircle: ุฅุถุงูุฉ ุฑูู ูุงุชู ุฌุฏูุฏ (ุฃุฒุฑู ุฑุงุจุท)
- XCircle: ุฅุฒุงูุฉ ุฑูู ูุงุชู (ุฃุญูุฑ)
- AtSign: ุฃููููุฉ ุงุณู ุงููุณุชุฎุฏู (@)
- KeyRound: ุฃููููุฉ ูููุฉ ุงููุฑูุฑ (ููุชุงุญ ุฏุงุฆุฑู)
- Users: ุฃููููุฉ ููุน ุงูุญุณุงุจ/ุงูุฏูุฑ
- UserPlus: ุฃููููุฉ ุฅูุดุงุก ุงูุญุณุงุจ (ูุณุชุฎุฏู + ุนูุงูุฉ ุฒุงุฆุฏ)
- LogIn: ุฃููููุฉ ุฑุงุจุท ุชุณุฌูู ุงูุฏุฎูู

ุฅุฏุงุฑุฉ ุฃุฑูุงู ุงูููุงุชู:
- ูุตูููุฉ ุฏููุงููููุฉ: phoneNumbers array
- ุญุฏ ุฃูุตู 4 ุฃุฑูุงู: phoneNumbers.length < 4
- ุญุฏ ุฃุฏูู ุฑูู ูุงุญุฏ: phoneNumbers.length > 1 ููุญุฐู
- ุชุฎุทูุท ูุฑู: flex items-center gap-2

ุฃููุงู ุงูุฑุณุงุฆู:
- ุฑุณุงุฆู ุงูุฎุทุฃ:
  * ุงููุต: text-red-600 dark:text-red-400
  * ุงูุฎูููุฉ: bg-red-100 dark:bg-red-500/20
- ุฑุณุงุฆู ุงููุฌุงุญ:
  * ุงููุต: text-green-600 dark:text-green-400
  * ุงูุฎูููุฉ: bg-green-100 dark:bg-green-500/20

ุฃููุงู ุฃุฒุฑุงุฑ ุฅุฏุงุฑุฉ ุงูููุงุชู:
- ุฒุฑ ุงูุฅุถุงูุฉ: variant="link" size="sm" (ุฃุฒุฑู ุฑุงุจุท)
- ุฒุฑ ุงูุญุฐู: variant="ghost" size="icon" ูุน:
  * text-red-500 hover:bg-red-500/10
  * ุฎูููุฉ ุญูุฑุงุก ุดูุงูุฉ ุนูุฏ ุงูุชูุฑูุฑ

ุงูุชุฎุทูุท ูุงููุณุงูุงุช:
- ุนุฑุถ ุงูุจุทุงูุฉ: max-w-lg (ุนุฑูุถ ููููุงู ูู ุชุณุฌูู ุงูุฏุฎูู)
- ุงููุณุงูุงุช ุจูู ุงูุนูุงุตุฑ: space-y-5
- ุธู ููู: shadow-xl dark:shadow-xl-dark

ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช:
- ุชุทุงุจู ูููุงุช ุงููุฑูุฑ
- ุทูู ูููุฉ ุงููุฑูุฑ (6 ุฃุญุฑู ูุญุฏ ุฃุฏูู)
- ุตูุบุฉ ุฃุฑูุงู ุงูููุงุชู (05xxxxxxxx ุฃู ุฃุฑุถูุฉ)
- ูุฌูุฏ ุฑูู ูุงุชู ูุงุญุฏ ุนูู ุงูุฃูู

ุงููุชุบูุฑุงุช ุงููููุฉ:
- UserRole: ุฃุฏูุงุฑ ุงููุณุชุฎุฏููู (Admin, PosAgent)
- ROLE_OPTIONS: ุฎูุงุฑุงุช ุงูุฃุฏูุงุฑ ูู constants.ts
- phoneNumbers: ูุตูููุฉ ุฃุฑูุงู ุงูููุงุชู
*/

import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { UserRole } from '../types';
import Card from '../components/ui/Card';
import Input from '../components/ui/Input';
import Button from '../components/ui/Button';
import Select from '../components/ui/Select';
import { APP_NAME, ROLE_OPTIONS } from '../constants';
import { UserPlus, LogIn, PlusCircle, XCircle, Phone, Briefcase, AtSign, KeyRound, Users, Droplets } from 'lucide-react';

const SignupPage: React.FC = () => {
  const [companyName, setCompanyName] = useState('');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [role, setRole] = useState<UserRole>(UserRole.PosAgent); 
  const [phoneNumbers, setPhoneNumbers] = useState<string[]>(['']); 
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const { signupUser, isLoadingAuth } = useAuth();
  const navigate = useNavigate();

  const handlePhoneNumberChange = (index: number, value: string) => {
    const newPhoneNumbers = [...phoneNumbers];
    newPhoneNumbers[index] = value;
    setPhoneNumbers(newPhoneNumbers);
  };

  const addPhoneNumberField = () => {
    if (phoneNumbers.length < 4) {
      setPhoneNumbers([...phoneNumbers, '']);
    }
  };

  const removePhoneNumberField = (index: number) => {
    if (phoneNumbers.length > 1) {
      const newPhoneNumbers = phoneNumbers.filter((_, i) => i !== index);
      setPhoneNumbers(newPhoneNumbers);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccessMessage(null);

    if (password !== confirmPassword) {
      setError('ูููุชุง ุงููุฑูุฑ ุบูุฑ ูุชุทุงุจูุชูู.');
      return;
    }
    if (password.length < 6) {
      setError('ูุฌุจ ุฃู ุชุชููู ูููุฉ ุงููุฑูุฑ ูู 6 ุฃุญุฑู ุนูู ุงูุฃูู.');
      return;
    }
    const activePhoneNumbers = phoneNumbers.map(p => p.trim()).filter(p => p !== '');
    if (activePhoneNumbers.length === 0) {
      setError('ูุฌุจ ุฅุฏุฎุงู ุฑูู ูุงุชู ูุงุญุฏ ุนูู ุงูุฃูู.');
      return;
    }
    // Accept any non-empty phone number - no format validation needed
    if (!companyName.trim()) {
        setError('ุงุณู ุงูุดุฑูุฉ ูุทููุจ.');
        return;
    }
     if (!username.trim()) {
        setError('ุงุณู ุงููุณุชุฎุฏู ูุทููุจ.');
        return;
    }
    if (username.trim().length < 3) {
        setError('ูุฌุจ ุฃู ูููู ุงุณู ุงููุณุชุฎุฏู 3 ุฃุญุฑู ุนูู ุงูุฃูู.');
        return;
    }


    try {
      const response = await signupUser(username, password, companyName, activePhoneNumbers, role); 
      if (response) {
        setSuccessMessage('๐ ุชู ุฅูุดุงุก ุทูุจ ุญุณุงุจู ุจูุฌุงุญ!\n\nโณ ุญุณุงุจู ุงูุขู ูู ุงูุชุธุงุฑ ูุฑุงุฌุนุฉ ุงููุฏูุฑ\n\n๐ง ุณุชุชููู ุฅุดุนุงุฑุงู ุนูุฏ ุงูููุงููุฉ ุนูู ุญุณุงุจู\n\nูุฑุฌู ุงูุงูุชุธุงุฑ ูุนุฏู ุฅูุดุงุก ุญุณุงุจ ุขุฎุฑ');
        setTimeout(() => {
          navigate('/login');
        }, 5000);
      } else {
        setError('ูุดู ุฅูุดุงุก ุงูุญุณุงุจ. ูุฏ ูููู ุงุณู ุงููุณุชุฎุฏู ููุฌูุฏูุง ุจุงููุนู.');
      }
    } catch (err: any) {
      setError(err.message || 'ูุดู ุฅูุดุงุก ุงูุญุณุงุจ. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.');
    }
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-background p-4">
      <div className="flex items-center mb-6 text-primary">
        <Droplets size={40} />
        <h1 className="text-3xl font-bold ms-3">{APP_NAME}</h1>
      </div>
      <Card 
        title="ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ" 
        className="w-full max-w-lg shadow-xl dark:shadow-xl-dark"
        titleClassName="text-xl text-center font-semibold"
      >
        <form onSubmit={handleSubmit} className="space-y-5">
          {error && (
            <div className="text-red-600 dark:text-red-400 text-center bg-red-100 dark:bg-red-500/20 p-4 rounded-md mb-4 border border-red-300 dark:border-red-500/30">
              <div className="text-lg font-bold mb-1">ุฎุทุฃ ูู ุงูุชุณุฌูู</div>
              <p className="text-md">{error}</p>
            </div>
          )}
          {successMessage && <p className="text-sm text-green-600 dark:text-green-400 text-center bg-green-100 dark:bg-green-500/20 p-2.5 rounded-md">{successMessage}</p>}
          
          <Input
            label="ุงุณู ุงูุดุฑูุฉ/ุงููุคุณุณุฉ"
            name="companyName"
            type="text"
            value={companyName}
            onChange={(e) => setCompanyName(e.target.value)}
            required
            leftIcon={<Briefcase size={18} className="text-muted-foreground"/>}
          />

          <div>
            <label className="block text-sm font-medium text-muted-foreground mb-1">
              ุฃุฑูุงู ุงูููุงุชู (ูุทููุจ ูุงุญุฏ ุนูู ุงูุฃูู - ุฃู ุฑูู ููุจูู):
            </label>
            {phoneNumbers.map((phone, index) => (
              <div key={index} className="flex items-center gap-2 mb-2">
                <Input
                  name={`phoneNumber-${index}`}
                  type="tel"
                  placeholder={`ุฑูู ุงููุงุชู ${index + 1}`}
                  value={phone}
                  onChange={(e) => handlePhoneNumberChange(index, e.target.value)}
                  leftIcon={<Phone size={18} className="text-muted-foreground"/>}
                  wrapperClassName="flex-grow mb-0"
                  aria-label={`ุฑูู ุงููุงุชู ${index+1}`}
                />
                {phoneNumbers.length > 1 && (
                  <Button type="button" variant="ghost" size="icon" onClick={() => removePhoneNumberField(index)} className="text-red-500 hover:bg-red-500/10 p-2" aria-label="ุฅุฒุงูุฉ ุฑูู ุงููุงุชู">
                    <XCircle size={20} />
                  </Button>
                )}
              </div>
            ))}
            {phoneNumbers.length < 4 && (
              <Button type="button" variant="link" size="sm" onClick={addPhoneNumberField} leftIcon={<PlusCircle size={16}/>} className="text-primary dark:text-primary-light p-0">
                ุฅุถุงูุฉ ุฑูู ูุงุชู ุขุฎุฑ
              </Button>
            )}
          </div>

          <Input
            label="ุงุณู ุงููุณุชุฎุฏู (ููุฏุฎูู)"
            name="username"
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            required
            autoComplete="username"
            leftIcon={<AtSign size={18} className="text-muted-foreground"/>}
          />
          <Input
            label="ูููุฉ ุงููุฑูุฑ"
            name="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            autoComplete="new-password"
            leftIcon={<KeyRound size={18} className="text-muted-foreground"/>}
          />
          <Input
            label="ุชุฃููุฏ ูููุฉ ุงููุฑูุฑ"
            name="confirmPassword"
            type="password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
            autoComplete="new-password"
            leftIcon={<KeyRound size={18} className="text-muted-foreground"/>}
          />
          <Select
            label="ููุน ุงูุญุณุงุจ (ุงูุฏูุฑ)"
            name="role"
            value={role}
            onChange={(e) => setRole(e.target.value as UserRole)}
            options={ROLE_OPTIONS}
            required
            leftIcon={<Users size={18} className="text-muted-foreground"/>}
          />
          <Button type="submit" variant="primary" className="w-full !py-2.5 text-base" isLoading={isLoadingAuth} leftIcon={<UserPlus size={18}/>}>
            ุฅูุดุงุก ุงูุญุณุงุจ
          </Button>
          <div className="text-center mt-3">
            <Link to="/login" className="text-sm text-primary hover:text-primary-hover hover:underline flex items-center justify-center">
              <LogIn size={16} className="me-1" />
              ูุฏูู ุญุณุงุจ ุจุงููุนูุ ุชุณุฌูู ุงูุฏุฎูู
            </Link>
          </div>
        </form>
      </Card>
      <footer className="mt-6 text-center text-sm text-muted-foreground">
        &copy; {new Date().getFullYear()} {APP_NAME}. ุฌููุน ุงูุญููู ูุญููุธุฉ.
      </footer>
    </div>
  );
};

export default SignupPage;
